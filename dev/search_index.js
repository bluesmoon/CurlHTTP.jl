var documenterSearchIndex = {"docs":
[{"location":"index.html#CurlHTTP.jl-Documentation","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.jl Documentation","text":"","category":"section"},{"location":"index.html","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.jl Documentation","text":"CurlHTTP","category":"page"},{"location":"index.html#CurlHTTP","page":"CurlHTTP.jl Documentation","title":"CurlHTTP","text":"Wrapper around LibCURL to make it more Julia like.\n\nThis module reexports LibCURL so everything available in LibCURL will be available when this module is used.\n\nSee https://curl.se/libcurl/c/libcurl-tutorial.html for a tutorial on using libcurl in C. The Julia interface should be similar.\n\nExamples\n\nGET a URL and read the response from the internal buffer\n\nusing CurlHTTP\n\ncurl = CurlEasy(\n    url=\"https://postman-echo.com/get?foo=bar\",\n    method=CurlHTTP.GET,\n    verbose=true\n)\n\nres, http_status, errormessage = curl_execute(curl)\n\n\n# curl.userdata[:databuffer] is a Vector{UInt8} containing the bytes of the response\nresponseBody = String(curl.userdata[:databuffer])\n\n# curl.userdata[:responseHeaders] is a Vector{String} containing the response headers\nresponseHeaders = curl.userdata[:responseHeaders]\n\nPOST to a URL and read the response with your own callback\n\nusing CurlHTTP\n\ncurl = CurlEasy(\n    url=\"https://postman-echo.com/post\",\n    method=CurlHTTP.POST,\n    verbose=true\n)\n\nrequestBody = \"{\"testName\":\"test_writeCB\"}\"\nheaders = [\"Content-Type: application/json\"]\n\ndatabuffer = UInt8[]\n\nres, http_status, errormessage = curl_execute(curl, requestBody, headers) do d\n    if isa(d, Array{UInt8})\n        append!(databuffer, d)\n    end\nend\n\nresponseBody = String(databuffer)\n\nMultiple concurrent requests using CurlMulti\n\nusing CurlHTTP\n\ncurl = CurlMulti()\n\nfor i in 1:3\n    local easy = CurlEasy(\n        url=\"https://postman-echo.com/post?val=$i\",\n        method=CurlHTTP.POST,\n        verbose=true,\n    )\n\n    requestBody = \"{\"testName\":\"test_multi_writeCB\",\"value\":$i}\"\n    headers     = [\"Content-Type: application/json\", \"X-App-Value: $(i*5)\"]\n\n    CurlHTTP.curl_setup_request_response(\n        easy,\n        requestBody,\n        headers\n    )\n\n    curl_multi_add_handle(curl, easy)\nend\n\nres = curl_execute(curl)\n\nresponses = [p.userdata for p in curl.pool]  # userdata contains response data, status code and error message\n\n\n\n\n\n","category":"module"},{"location":"index.html#Globals","page":"CurlHTTP.jl Documentation","title":"Globals","text":"","category":"section"},{"location":"index.html","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.jl Documentation","text":"CurlHTTP.DEFAULT_USER_AGENT","category":"page"},{"location":"index.html#CurlHTTP.DEFAULT_USER_AGENT","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.DEFAULT_USER_AGENT","text":"Default user agent to use if not otherwise specified. This allows an application to set the user agent string at init time rather than at constructor time.\n\nUse CurlHTTP.setDefaultUserAgent() to set it. Set it to nothing to unset it.\n\n\n\n\n\n","category":"constant"},{"location":"index.html#Exported-Types","page":"CurlHTTP.jl Documentation","title":"Exported Types","text":"","category":"section"},{"location":"index.html","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.jl Documentation","text":"CurlHandle\nCurlEasy\nCurlMulti","category":"page"},{"location":"index.html#CurlHTTP.CurlHandle","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.CurlHandle","text":"Abstract type representing all types of Curl Handles. Currently CurlEasy and CurlMulti.\n\n\n\n\n\n","category":"type"},{"location":"index.html#CurlHTTP.CurlEasy","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.CurlEasy","text":"Wrapper around a curl_easy handle. This is what we get from calling curl_easy_init.\n\nMost curl_easy_* functions will work on a CurlEasy object without any other changes.\n\nSummary\n\nstruct CurlEasy <: CurlHandle\n\nFields\n\nhandle::Ptr : A C pointer to the curl_easy handle\n\nheaders::Ptr : A C pointer to the list of headers passed on to curl. We hold onto this to make sure we can free allocated memory when required.\n\nuuid::UUID : A unique identifier for this curl handle. Used internally to identify a handle within a pool.\n\nuserdata::Dict : A dictionary of user specified data. You may add anything you want to this and it will be passed along with the curl handle to all functions.   This dictionary will also be populated by several convenience functions to add the :http_status, :errormessage, and response header (:databuffer).   All data added by internal code will use Symbol keys.\n\nConstructors\n\nCurlEasy(curl::Ptr) : Create a CurlEasy wrapper around an existing LibCURL curl handle.\n\nCurlEasy(; url::String, method::HTTPMethod, verbose::Bool, certpath::String, keypath::String, cacertpath::String, useragent::String|Nothing) : Create a new curl object with default settings and wrap it.  The default settings are:\n\nFOLLOWLOCATION\nSSL_VERIFYPEER\nSSL_VERIFYHOST\nSSL_VERSION (highest possible up to TLS 1.3)\nHTTP_VERSION (H2 over TLS or HTTP/1.1)\nTCP_FASTOPEN disabled\nTCP_KEEPALIVE\nACCEPT_ENCODING best supported\nTRANSFER_ENCODING\nDNSCACHETIMEOUT disabled\n\nAdditionally the following options are set based on passed in parameters:\n\nPOST if method is POST\nHTTPGET if method is GET\nNOBODY if method is HEAD\nCUSTOMREQUEST if method is HEAD, DELETE, or OPTIONS\nVERBOSE if verbose is true\nSSLCERT if certpath is set\nSSLKEY if certpath and keypath are set\nCAINFO defaults to LibCURL.cacert but can be overridden with cacertpath\nURL if url is set\nUSERAGENT if useragent is set to something other than nothing.\n\n\n\n\n\n","category":"type"},{"location":"index.html#CurlHTTP.CurlMulti","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.CurlMulti","text":"Wrapper around a curl_multi handle. This is what we get from calling curl_multi_init\n\nSummary\n\nstruct CurlMulti <: CurlHandle\n\nFields\n\nhandle::Ptr : A C pointer to the curl_multi handle\n\npool::CurlEasy[] : An array of CurlEasy handles that are added to this CurlMulti handle. These can be added via the constructor or via a call to curl_multi_add_handle, and   may be removed via a call to curl_multi_remove_handle.\n\nConstructors\n\nCurlMulti() : Default constructor that calls curl_multi_init and sets up an empty pool\n\nCurlMulti(::CurlEasy[]) : Constructor that accepts a Vector of CurlEasy objects, creates a curl_multi handle, and adds the easy handles to it.\n\n\n\n\n\n","category":"type"},{"location":"index.html#Internal-Types","page":"CurlHTTP.jl Documentation","title":"Internal Types","text":"","category":"section"},{"location":"index.html","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.jl Documentation","text":"CurlHTTP.HTTPMethod\nCurlHTTP.ChannelMarkers","category":"page"},{"location":"index.html#CurlHTTP.HTTPMethod","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.HTTPMethod","text":"HTTP Methods recognized by CurlHTTP. Current values are:\n\nGET: Make a GET request\nPOST: Upload data using POST\nHEAD: Make a HEAD request and specify no response body\nDELETE: Make a DELETE request\nPUT: Currently not supported\nOPTIONS: Make an OPTIONS request\n\n\n\n\n\n","category":"type"},{"location":"index.html#CurlHTTP.ChannelMarkers","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.ChannelMarkers","text":"Internal markers for the data channel\n\n\n\n\n\n","category":"type"},{"location":"index.html#Exported-Methods","page":"CurlHTTP.jl Documentation","title":"Exported Methods","text":"","category":"section"},{"location":"index.html","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.jl Documentation","text":"Modules=[CurlHTTP]\nOrder=[:function]\nFilter=f -> which(CurlHTTP, Symbol(f)) == CurlHTTP\nPrivate=false","category":"page"},{"location":"index.html#CurlHTTP.curl_add_headers-Tuple{CurlEasy, Vector{String}}","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.curl_add_headers","text":"Add a vector of headers to the curl object\n\n\n\n\n\n","category":"method"},{"location":"index.html#CurlHTTP.curl_cleanup-Tuple{CurlEasy}","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.curl_cleanup","text":"Cleanup the CurlHandle automatically determining what needs to be done for curl_easy vs curl_multi handles. In general, this will be called automatically when the CurlHandle gets garbage collected.\n\n\n\n\n\n","category":"method"},{"location":"index.html#CurlHTTP.curl_error_to_string-Tuple{Vector{UInt8}}","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.curl_error_to_string","text":"curl_error_to_string(::Vector{UInt8}) → String\n\nConvert curl's error message stored as a NULL terminated sequence of bytes into a Julia String\n\n\n\n\n\n","category":"method"},{"location":"index.html#CurlHTTP.curl_execute","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.curl_execute","text":"curl_execute(data_handler::Function, ::CurlEasy, ::String, ::Vector{String}; url::String) → (CURLCode, Int64, String)\ncurl_execute(::CurlEasy, ::String, Vector{String}; url::String, data_handler::Function, header_handler::Function)  → (CURLCode, Int64, String)\n\nExecute a CurlEasy handle optionally passing in a requestBody (for POSTs), any HTTP request headers, a request URL, and handlers for response data and headers.\n\nIn its first form this method accepts the data_handler as the first argument allowing you to use curl_execute(curl) do data ... end to handle the data. In this case, response headers are ignored.\n\nIn its second form, both data and header handlers are passed in as keyword arguments. If not specified, then default handlers are set up that write to userdata[:databuffer] and userdata[:responseHeaders] respectively.  You may explicitly set the handler to nothing to avoid handling data or headers. This can have a small improvement in memory utilization.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CurlHTTP.curl_execute-Tuple{CurlMulti}","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.curl_execute","text":"curl_execute(::CurlMulti) → CURLMcode\n\nExecutes all pending CurlEasy attached to the CurlMulti handle and returns a CURLMcode indicating success or failure.\n\nIn most cases, this function should return CURLM_OK even if there were failures in individual transfers. Each CurlEasy handle will have userdata[:http_status] set and userdata[:errormessage] will be set in case of an error.\n\nThis function will print errors or warnings to the Logger for unexpected states. File a bug if you see any of these.\n\n\n\n\n\n","category":"method"},{"location":"index.html#CurlHTTP.curl_perform-Tuple{CurlEasy}","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.curl_perform","text":"Run either curl_easy_perform or curl_multi_perform depending on the type of handle passed in.\n\n\n\n\n\n","category":"method"},{"location":"index.html#CurlHTTP.curl_response_status-Tuple{CurlEasy}","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.curl_response_status","text":"curl_response_status(::CurlEasy) → Int64\n\nGet the HTTP status code of the most recent response from the CurlEasy object.\n\n\n\n\n\n","category":"method"},{"location":"index.html#CurlHTTP.curl_setup_request","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.curl_setup_request","text":"Prepare a CurlEasy object for making a request.\n\nAdds the requestBody and a corresponding Content-Length\nAdds headers\nIf data_channel or header_channel are set, then sets up a default WRITE/HEADER callback that writes to that Channel\nIf url is set, sets the request URL\n\n\n\n\n\n","category":"function"},{"location":"index.html#CurlHTTP.curl_url_escape-Tuple{CurlEasy, AbstractString}","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.curl_url_escape","text":"curl_url_escape(::CurlEasy, ::String) → String\ncurl_url_escape(::String) → String\n\nUse curl to do URL escaping\n\n\n\n\n\n","category":"method"},{"location":"index.html#Methods-extended-from-LibCURL","page":"CurlHTTP.jl Documentation","title":"Methods extended from LibCURL","text":"","category":"section"},{"location":"index.html","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.jl Documentation","text":"Modules=[CurlHTTP]\nOrder=[:function]\nFilter=f -> which(CurlHTTP, Symbol(f)) == LibCURL\nPrivate=false","category":"page"},{"location":"index.html#LibCURL.curl_easy_cleanup-Tuple{CurlEasy}","page":"CurlHTTP.jl Documentation","title":"LibCURL.curl_easy_cleanup","text":"Cleanup everything created by the CurlEasy constructor. See the upstream docs for more details.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibCURL.curl_easy_duphandle-Tuple{CurlEasy}","page":"CurlHTTP.jl Documentation","title":"LibCURL.curl_easy_duphandle","text":"Clone a CurlEasy handle. See the upstream docs for more details.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibCURL.curl_easy_escape-Tuple{CurlEasy, Any, Any}","page":"CurlHTTP.jl Documentation","title":"LibCURL.curl_easy_escape","text":"URL escape a Julia string using a CurlEasy handle to make it safe for use as a URL. See the upstream docs\n\nThe return value is a Julia string with memory owned by Julia, so there's no risk of leaking memory.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibCURL.curl_easy_perform-Tuple{CurlEasy}","page":"CurlHTTP.jl Documentation","title":"LibCURL.curl_easy_perform","text":"Perform a CurlEasy transfer synchronously. See the upstream docs for more details.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibCURL.curl_easy_setopt-Tuple{CurlEasy, Any, Integer}","page":"CurlHTTP.jl Documentation","title":"LibCURL.curl_easy_setopt","text":"Set options for the CurlEasy handle. See the upstream docs for all possible options, and links to documentation for each option.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibCURL.curl_multi_add_handle-Tuple{CurlMulti, CurlEasy}","page":"CurlHTTP.jl Documentation","title":"LibCURL.curl_multi_add_handle","text":"Adds a CurlEasy handle to the CurlMulti pool. See the upstream docs\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibCURL.curl_multi_cleanup-Tuple{CurlMulti}","page":"CurlHTTP.jl Documentation","title":"LibCURL.curl_multi_cleanup","text":"Cleanup everything created by the CurlMulti constructor. See the upstream docs for more details.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibCURL.curl_multi_perform-Tuple{CurlMulti, Ref{Int32}}","page":"CurlHTTP.jl Documentation","title":"LibCURL.curl_multi_perform","text":"Perform all CurlEasy transfers attached to a CurlMulti handle asynchronously. See the upstream docs for more details.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibCURL.curl_multi_remove_handle-Tuple{CurlMulti, CurlEasy}","page":"CurlHTTP.jl Documentation","title":"LibCURL.curl_multi_remove_handle","text":"Remove a CurlEasy handle from the CurlMulti pool. See the upstream docs. Pass in either the CurlEasy handle or its CurlHandle.uuid.\n\n\n\n\n\n","category":"method"},{"location":"index.html#Internal-Methods","page":"CurlHTTP.jl Documentation","title":"Internal Methods","text":"","category":"section"},{"location":"index.html","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.jl Documentation","text":"Modules=[CurlHTTP]\nOrder=[:function]\nPublic=false","category":"page"},{"location":"index.html#CurlHTTP.curl_cb_preamble-Tuple{Ptr{Nothing}, UInt64, UInt64, Ptr{Nothing}}","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.curl_cb_preamble","text":"Run common housekeeping tasks required by a curl callback function.\n\nThis function should be called from a curl WRITE or HEADER callback function. It does the following:\n\nCalculate the number of bytes read\nCopy bytes into a Vector{UInt8}\nConvert any non-null userdata parameter to a julia type\n\nIt then returns a tuple of these three values.\n\n\n\n\n\n","category":"method"},{"location":"index.html#CurlHTTP.curl_debug_cb-Tuple{Ptr{Nothing}, Int32, Ptr{Nothing}, UInt64, Ptr{Nothing}}","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.curl_debug_cb","text":"[Internal] curl debug callback to log informational text, header data, and SSL data transferred over the network. This will only run if curl is configured in verbose mode.\n\n\n\n\n\n","category":"method"},{"location":"index.html#CurlHTTP.curl_header_cb-Tuple{Ptr{Nothing}, UInt64, UInt64, Ptr{Nothing}}","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.curl_header_cb","text":"Default header callback that puts the current header as a crlf terminate String onto a Channel passed in via curl_easy_setopt(CURLOPT_HEADERDATA).\n\nThis callback is called by curl when header data is available to be read and is set up in curl_setup_request\n\n\n\n\n\n","category":"method"},{"location":"index.html#CurlHTTP.curl_setup_request_response","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.curl_setup_request_response","text":"Setup the request object and response handlers in preparation to execute a request.\n\nWhen using the CurlEasy interface, this method is called internally by curl_execute, however when using the CurlMulti interface, it is necessary to call this on every CurlEasy handle added to the CurlMulti handle.\n\nThis method allows you to set up your own response data and header handlers that receive streamed data. If you do not pass in a handler, default handlers will be set up that write binary data as bytes (Vector{UInt8}) to  curl.userdata[:databuffer] and an array of String response headers (Vector{String}) to curl.userdata[:responseHeaders].\n\nArguments\n\ncurl::CurlEasy : The CurlEasy handle to operate on\n\nrequestBody::String : Any request body text that should be passed on to the server. Typically used for POST requests. Leave this as an empty   String to skip. This is passed as-is to curl_setup_request.\n\nheaders::Vector{String} = String[] : Any request headers that should be passed on to the server as part of the request.  Headers SHOULD be of the form key: value.   Consult RFC 2616 section 4.2 for more details on HTTP request headers.\n\nKeyword Arguments\n\ndata_handler::Union{Function, Nothing} = <default> : A function to handle any response Body data. This function should accept a single argument of type Vector{UInt8}. Its return value will be ignored.   If not specified, a default handler will be used.  Set this explicitly to nothing to disable handling of HTTP response body data.\n\ndata_handler::Union{Function, Nothing} = <default> : A function to handle any response Header data. This function should accept a single argument of type String. Its return value will be ignored.   If not specified, a default handler will be used.  Set this explicitly to nothing to disable handling of HTTP response header data.\n\nurl::AbstractString=\"\" : The URL to use for this request. This permanently overrides the url passed in to the CurlEasy constructor. If not specified, then the previous value   of the CurlEasy's url is reused.\n\nReturns\n\nThe CurlEasy object.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CurlHTTP.curl_write_cb-Tuple{Ptr{Nothing}, UInt64, UInt64, Ptr{Nothing}}","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.curl_write_cb","text":"Default write callback that puts the data stream as a Vector{UInt8} onto a Channel passed in via curl_easy_setopt(CURLOPT_WRITEDATA).\n\nThis callback is called by curl when data is available to be read and is set up in curl_setup_request\n\n\n\n\n\n","category":"method"},{"location":"index.html#CurlHTTP.setDefaultUserAgent-Tuple{Union{Nothing, AbstractString}}","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.setDefaultUserAgent","text":"Set the default user agent string to use for all requests. Set this to nothing to disable setting the user agent string.\n\n\n\n\n\n","category":"method"},{"location":"index.html#CurlHTTP.setup_response_handler-Tuple{Function, Base.UUID}","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.setup_response_handler","text":"Setup a Channel for the default response handlers to write to.\n\n\n\n\n\n","category":"method"},{"location":"index.html#Index","page":"CurlHTTP.jl Documentation","title":"Index","text":"","category":"section"},{"location":"index.html","page":"CurlHTTP.jl Documentation","title":"CurlHTTP.jl Documentation","text":"","category":"page"}]
}
